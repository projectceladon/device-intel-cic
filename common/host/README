# Development PC setup:
Ubuntu 18.04.3 64bit

# Precondition in Development PC:
sudo apt-get install git build-essential kernel-package fakeroot libncurses5-dev libssl-dev ccache bison flex libelf-dev

# Instructions to build and install Kernel

### Clone chrome kernel
cd ~
git clone https://chromium.googlesource.com/chromiumos/third_party/kernel
cd kernel

### checkout to commit FROMLIST: soc: mediatek: cmdq: avoid racing condition with mutex
git checkout 9ef230cb4f657f7e33ad5bb391012d1cf71a66ce

### Patch to get Wi-Fi working in Lenovo HW variants
wget https://lore.kernel.org/patchwork/patch/1067807/raw -O wifi.patch
patch -p1 < wifi.patch
# Error will be reported. Please manually rebase the patch by using wifi.patch as reference
git add drivers/platform/x86/ideapad-laptop.c
git commit drivers/platform/x86/ideapad-laptop.c
Add commit message

### Changes to make sure correct Wi-Fi firmware is loaded in C640
change "#define IWL_22000_UCODE_API_MAX 50" to "#define IWL_22000_UCODE_API_MAX 48" in
drivers/net/wireless/iwl7000/iwlwifi/cfg/22000.c
# Remove the line "#define CPTCFG_IWLWIFI_DISALLOW_OLDER_FW 1" in drivers/net/wireless/iwl7000/hdrs/config.h
git commit drivers/net/wireless/iwl7000/iwlwifi/cfg/22000.c drivers/net/wireless/iwl7000/hdrs/config.h

### Fix issue in sensor hub driver for C640
Do the following change in drivers/hid/hid-core.c and commit the changes(git commit drivers/hid/hid-core.c)

diff --git a/drivers/hid/hid-core.c b/drivers/hid/hid-core.c
index eb9c7c3..778a633 100644
--- a/drivers/hid/hid-core.c
+++ b/drivers/hid/hid-core.c

@@ -418,7 +418,7 @@ static int hid_parser_global(struct hid_parser *parser, struct hid_item *item)


        case HID_GLOBAL_ITEM_TAG_REPORT_SIZE:

                parser->global.report_size = item_udata(item);

-               if (parser->global.report_size > 128) {

+               if (parser->global.report_size > 256) {

                        hid_err(parser->device, "invalid report_size %d\n",

                                        parser->global.report_size);

                        return -1;


### Kernel Config Update
# copy kernel config from HOST machine (cp /boot/<config_name> .config)
# eg: "cp /boot/config-5.0.0-32-generic .config"
make ARCH=x86_64 olddefconfig
make ARCH=x86_64 menuconfig

# Enable APP ARMOR
# Security Options->Default security module->AppArmor
# Save the config file to same .config file and go back to first menu list

# Enable PStore
# File systems -> Miscellaneous filesystems -> Persistent store support"
# File systems -> Miscellaneous filesystems -> Log kernel console message"
# File systems -> Miscellaneous filesystems -> Log panic/oops to a RAM buffer"
# Save the config file to same .config file and go back to first menu list

# Enable Wi-Fi driver
# "Device Drivers->Network device support -> Wireless LAN->Intel Wireless WiFi 7000 series driver (new version)"

# Enable Uevent notification of Gadget state (needed for secure ADB)
# "Device Drivers->USB support -> USB Gadget support ->Uevent notification of Gadget state"
# Save the config file to same .config file


### SOF kernel compilation instructions

cd ~
git clone https://github.com/projectceladon/device-intel-cic.git -b celadon/p/mr0/master

cd ~/kernel/
git clone https://github.com/thesofproject/kconfig.git
cd kconfig
git checkout bb535b3880bf3425b2135b078247b9ba961e607e

cd ..
git am ~/device-intel-cic/common/host/sof/kernel_patches/*.patch

# Enable SOF specific kernel configs
./scripts/kconfig/merge_config.sh .config kconfig/sof-defconfig kconfig/hdaudio-codecs-defconfig kconfig/sof-mach-driver-defconfig

### Kernel Config Update
make ARCH=x86_64 menuconfig

# Disable Xen para-virtualized sound frontend driver

# "Device Drivers->Sound Card support -> Advanced Linux Sound Architecture -> Xen para-virtualized sound frontend driver "

# Disable AMD Audio coprocessor support"
# "Device Drivers->Sound Card support -> Advanced linux sound Architecture -> ALSA for SoC audio support -> AMD Audio Coprocessor Support"
# "Device Drivers->Sound Card support -> Advanced Linux Sound Architecture -> ALSA for SoC audio support -> AMD Audio Coprocessor-v3.x Support"

# Apply patches specific to storage issues
# Fix for nvme issue seen with Samsung and Toshiba storage seen on suspend/resume
git am ~/device-intel-cic/common/host/storage/*.patch

# Don't apply kernel debug patches and also don't enable kernel debugging features in product
# Apply patches needed to debug kernel panic, mutex and hang issues
# Apply patch needed to warm reset on kernel panic
git am ~/device-intel-cic/common/host/debug/*.patch

### Kernel Config Update
make ARCH=x86_64 menuconfig

# Enable configs to debug kernel panic, mutex and hang issues
Kernel hacking -> Debug Lockups and Hangs ---> Panic (Reboot) on Soft Lockups
Kernel hacking -> Debug Lockups and Hangs ---> Detect Hard Lockups
Kernel hacking -> Debug Lockups and Hangs ---> Panic (Reboot) On Hard Lockups
Kernel hacking -> Debug Lockups and Hangs ---> Detect Hung Tasks
Kernel hacking -> Debug Lockups and Hangs ---> Panic (Reboot) On Hung Tasks
Kernel hacking -> Debug Lockups and Hangs ---> Detect Workqueue Stalls
Kernel hacking -> Panic on Oops
Kernel hacking -> panic timeout -> 10
Kernel hacking -> Lock Debugging -> RT Mutex debugging, deadlock detection
Kernel hacking -> Lock Debugging -> Lock debugging: detect incorrect freeing of live locks

### Compile kernel

# Make steps
make ARCH=x86_64 clean
make ARCH=x86_64 -j64 LOCALVERSION=-celadon bindeb-pkg

# Copy deb files to USB and get it deployed in target device

cd ..
# cp *.deb files to USB and get it deployed in target device(<kernel_deb_folder>)
# copy the deb files to target PC

# Install the kernel debs
cd <kernel_deb_folder>  #in target device
sudo dpkg -i *.deb


### Update grub to wait indefinitely for kernel selection on boot
sudo vim /etc/default/grub

# Comment out GRUB_TIMEOUT_STYLE=hidden
#GRUB_TIMEOUT_STYLE=hidden

#Modify grub timeout to -1
#GRUB_TIMEOUT=-1

#Save the file
sudo update-grub


### Non-kernel host side changes for SOF
cd ~/sof
wget https://raw.githubusercontent.com/projectceladon/device-intel-cic/celadon/p/mr0/master/common/host/sof/blacklist-dsp.conf
sudo cp blacklist-dsp.conf /etc/modprobe.d/

# Download and copy sof firmware to firmware folder
git clone https://github.com/thesofproject/linux-firmware.git
sudo mkdir /lib/firmware/intel/sof
sudo mkdir /lib/firmware/intel/sof-tplg
sudo cp linux-firmware/intel/sof/cml/intel/sof-cml-v1.3-0f73628.ri /lib/firmware/intel/sof/sof-cml.ri

# Instructions to build topology file
# Build PC setup instructions
# https://thesofproject.github.io/latest/getting_started/build-guide/build-from-scratch.html#set-up-build-environment
cd ~
git clone https://github.com/alsa-project/alsa-lib.git
cd alsa-lib
./gitcompile
sudo make install
export LD_LIBRARY_PATH=~/alsa-lib/src/.libs:$LD_LIBRARY_PATH
sudo cp src/.libs/libasound.* /usr/lib/x86_64-linux-gnu/
cd ../
git clone https://github.com/alsa-project/alsa-utils.git
cd alsa-utils/
./gitcompile
# "Press Return to acknowledge the previous three paragraphs" text will be shown
# Press Enter to continue with compilation
sudo make install
cd ../
git clone https://github.com/thesofproject/sof.git
cd sof
git checkout ce80a73a4159f3b66d015067a3473b114675baa4
sudo apt install cmake
./scripts/build-tools.sh
sudo cp tools/build_tools/topology/sof-hda-generic-2ch.tplg /lib/firmware/intel/sof-tplg/sof-hda-generic.tplg


### Reboot the target device after the above files are copied.
reboot
# Select compiled kernel from "Advanced options for Ubuntu"

# Once device is booted to Ubuntu, the sof card should be listed
# Download and copy UCM files needed for Audio playback and capture to work from UI
# From the command "cat /proc/asound/cards", if the card name is "sof-skl_hda_card", use below ucm:
wget https://github.com/projectceladon/device-intel-cic/raw/celadon/p/mr0/master/common/host/sof/sof-skl_hda_card.tar
sudo tar -C  /usr/share/alsa/ucm/ -xvf sof-skl_hda_card.tar

#If the card name(from "cat /proc/asound/cards") isn't sof-skl_hda_card, rename the folder/file names as per device name, referring above
#Also, if you have copied any Lonovo specific ucm folder under /usr/share/alsa/ucm, remove those to avoid conflict:
sudo rm -rf /usr/share/alsa/ucm/LENOVO*


### Reboot the target device after the above files are copied.
Install cic
reboot
# Select compiled kernel from "Advanced options for Ubuntu"
# Once device is booted to Ubuntu idle screen, double click "Android on Linux Client"  to launch CIC
