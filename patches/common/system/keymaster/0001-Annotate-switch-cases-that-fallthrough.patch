From 6a794c442eb138831d0952ec54164464e22ef123 Mon Sep 17 00:00:00 2001
From: Nick Bray <ncbray@google.com>
Date: Tue, 20 Mar 2018 11:02:53 -0700
Subject: [PATCH 1/3] Annotate switch cases that fallthrough.

This allows enabling -Wimplicit-fallthrough.

Bug: 76101949
Test: compiles

Change-Id: I7059521a1b64339e953e8bc66aa62631a4b91897
Tracked-On: https://jira01.devtools.intel.com/browse/OAM-68902
Signed-off-by: Nick Bray <ncbray@google.com>
Reviewed-on: https://android.intel.com:443/646292
---
 Android.bp                                       | 10 +++++++---
 android_keymaster/android_keymaster_messages.cpp |  8 ++++----
 include/keymaster/android_keymaster_utils.h      | 12 ++++++++++++
 3 files changed, 23 insertions(+), 7 deletions(-)

diff --git a/Android.bp b/Android.bp
index fe0b8e7..95d4c60 100644
--- a/Android.bp
+++ b/Android.bp
@@ -38,9 +38,12 @@ cc_library_shared {
     ],
     stl: "none",
     clang: true,
-    // TODO(krasin): reenable coverage flags, when the new Clang toolchain is released.
-    // Currently, if enabled, these flags will cause an internal error in Clang.
-    clang_cflags: ["-fno-sanitize-coverage=edge,indirect-calls,8bit-counters,trace-cmp"],
+    clang_cflags: [
+        "-Wimplicit-fallthrough",
+        // TODO(krasin): reenable coverage flags, when the new Clang toolchain is released.
+        // Currently, if enabled, these flags will cause an internal error in Clang.
+        "-fno-sanitize-coverage=edge,indirect-calls,8bit-counters,trace-cmp"
+    ],
 
     export_include_dirs: ["include"],
     sanitize: {
@@ -125,6 +128,7 @@ cc_library {
     clang_cflags: [
         "-Wno-error=unused-const-variable",
         "-Wno-error=unused-private-field",
+        "-Wimplicit-fallthrough",
         // TODO(krasin): reenable coverage flags, when the new Clang toolchain is released.
         // Currently, if enabled, these flags will cause an internal error in Clang.
         "-fno-sanitize-coverage=edge,indirect-calls,8bit-counters,trace-cmp"
diff --git a/android_keymaster/android_keymaster_messages.cpp b/android_keymaster/android_keymaster_messages.cpp
index d5aa953..0163aaa 100644
--- a/android_keymaster/android_keymaster_messages.cpp
+++ b/android_keymaster/android_keymaster_messages.cpp
@@ -215,10 +215,10 @@ size_t UpdateOperationResponse::NonErrorSerializedSize() const {
     case 3:
     case 2:
         size += output_params.SerializedSize();
-        ; /* falls through */
+        FALLTHROUGH;
     case 1:
         size += sizeof(uint32_t);
-        ; /* falls through */
+        FALLTHROUGH;
     case 0:
         size += output.SerializedSize();
         break;
@@ -253,11 +253,11 @@ size_t FinishOperationRequest::SerializedSize() const {
     switch (message_version) {
     case 3:
         size += input.SerializedSize();
-        ; /* falls through */
+        FALLTHROUGH;
     case 2:
     case 1:
         size += additional_params.SerializedSize();
-        ; /* falls through */
+        FALLTHROUGH;
     case 0:
         size += sizeof(op_handle) + signature.SerializedSize();
         break;
diff --git a/include/keymaster/android_keymaster_utils.h b/include/keymaster/android_keymaster_utils.h
index 67bf98d..dfc51e7 100644
--- a/include/keymaster/android_keymaster_utils.h
+++ b/include/keymaster/android_keymaster_utils.h
@@ -26,6 +26,18 @@
 #include <hardware/keymaster_defs.h>
 #include <keymaster/serializable.h>
 
+#ifndef __has_cpp_attribute
+#define __has_cpp_attribute(x) 0
+#endif
+
+// Mark intentional fallthroughts in switch statements to silence
+// -Wimplicit-fallthrough.
+#if __has_cpp_attribute(clang::fallthrough)
+#define FALLTHROUGH [[clang::fallthrough]]
+#else
+#define FALLTHROUGH
+#endif
+
 namespace keymaster {
 
 /**
-- 
2.7.4

