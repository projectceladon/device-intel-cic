From 1cf470f54646303bacd1628c6441828df3dc3277 Mon Sep 17 00:00:00 2001
From: rnaidu <ramya.v.naidu@intel.com>
Date: Mon, 30 Sep 2019 16:29:50 +0530
Subject: [PATCH 2/3] Changes requires for the celadon P latest AOSP rebase

Tracked-On: OAM-86905
Signed-off-by: rnaidu <ramya.v.naidu@intel.com>
---
 android_keymaster/android_keymaster.cpp |  6 +++---
 include/keymaster/keymaster_context.h   |  6 +++---
 km_openssl/attestation_utils.cpp        | 18 +++++++++---------
 3 files changed, 15 insertions(+), 15 deletions(-)

diff --git a/android_keymaster/android_keymaster.cpp b/android_keymaster/android_keymaster.cpp
index cceba59..4dba06b 100644
--- a/android_keymaster/android_keymaster.cpp
+++ b/android_keymaster/android_keymaster.cpp
@@ -219,7 +219,7 @@ void AndroidKeymaster::GenerateKey(const GenerateKeyRequest& request,
         return;
 
     keymaster_algorithm_t algorithm;
-    KeyFactory* factory = 0;
+    const KeyFactory* factory = nullptr; 
     UniquePtr<Key> key;
     if (!request.key_description.GetTagValue(TAG_ALGORITHM, &algorithm) ||
         !(factory = context_->GetKeyFactory(algorithm)))
@@ -432,7 +432,7 @@ void AndroidKeymaster::ImportKey(const ImportKeyRequest& request, ImportKeyRespo
         return;
 
     keymaster_algorithm_t algorithm;
-    KeyFactory* factory = 0;
+    const KeyFactory* factory = nullptr;
     UniquePtr<Key> key;
     if (!request.key_description.GetTagValue(TAG_ALGORITHM, &algorithm) ||
         !(factory = context_->GetKeyFactory(algorithm)))
@@ -514,7 +514,7 @@ void AndroidKeymaster::ImportWrappedKey(const ImportWrappedKeyRequest& request,
     }
 
     keymaster_algorithm_t algorithm;
-    KeyFactory* factory = 0;
+    const KeyFactory* factory = nullptr; 
     if (!key_description.GetTagValue(TAG_ALGORITHM, &algorithm) ||
         !(factory = context_->GetKeyFactory(algorithm))) {
         response->error = KM_ERROR_UNSUPPORTED_ALGORITHM;
diff --git a/include/keymaster/keymaster_context.h b/include/keymaster/keymaster_context.h
index ffbe81c..cace248 100644
--- a/include/keymaster/keymaster_context.h
+++ b/include/keymaster/keymaster_context.h
@@ -83,10 +83,10 @@ class KeymasterContext {
      */
     virtual void GetSystemVersion(uint32_t* os_version, uint32_t* os_patchlevel) const = 0;
 
-    virtual KeyFactory* GetKeyFactory(keymaster_algorithm_t algorithm) const = 0;
-    virtual OperationFactory* GetOperationFactory(keymaster_algorithm_t algorithm,
+    virtual const KeyFactory* GetKeyFactory(keymaster_algorithm_t algorithm) const = 0;
+    virtual const OperationFactory* GetOperationFactory(keymaster_algorithm_t algorithm,
                                                   keymaster_purpose_t purpose) const = 0;
-    virtual keymaster_algorithm_t* GetSupportedAlgorithms(size_t* algorithms_count) const = 0;
+    virtual const keymaster_algorithm_t* GetSupportedAlgorithms(size_t* algorithms_count) const = 0;
 
     /**
      * UpgradeKeyBlob takes an existing blob, parses out key material and constructs a new blob with
diff --git a/km_openssl/attestation_utils.cpp b/km_openssl/attestation_utils.cpp
index d9d314a..9805ff3 100644
--- a/km_openssl/attestation_utils.cpp
+++ b/km_openssl/attestation_utils.cpp
@@ -39,7 +39,7 @@ constexpr int kDataEnciphermentKeyUsageBit = 3;
 constexpr int kMaxKeyUsageBit = 8;
 
 template <typename T> T && min(T && a, T && b) {
-    return (a < b) ? std::forward<T>(a) : std::forward<T>(b);
+    return (a < b) ? forward<T>(a) : forward<T>(b);
 }
 
 struct emptyCert {};
@@ -100,7 +100,7 @@ inline bool certCopier(keymaster_blob_t** out, const keymaster_cert_chain_t& cha
 __attribute__((__unused__))
 inline bool certCopier(keymaster_blob_t** out, keymaster_cert_chain_t&& chain, bool* fail) {
     for (size_t i = 0; i < chain.entry_count; ++i) {
-        *(*out)++ = certBlobifier(std::move(chain.entries[i]), fail);
+        *(*out)++ = certBlobifier(move(chain.entries[i]), fail);
     }
     delete[] chain.entries;
     chain.entries = nullptr;
@@ -109,7 +109,7 @@ inline bool certCopier(keymaster_blob_t** out, keymaster_cert_chain_t&& chain, b
 }
 template <typename CERT>
 inline bool certCopier(keymaster_blob_t** out, CERT&& cert, bool* fail) {
-    *(*out)++ = certBlobifier(std::forward<CERT>(cert), fail);
+    *(*out)++ = certBlobifier(forward<CERT>(cert), fail);
     return *fail;
 }
 
@@ -119,8 +119,8 @@ inline bool certCopyHelper(keymaster_blob_t**, bool* fail) {
 
 template <typename CERT, typename... CERTS>
 inline bool certCopyHelper(keymaster_blob_t** out, bool* fail, CERT&& cert, CERTS&&... certs) {
-    certCopier(out, std::forward<CERT>(cert), fail);
-    return certCopyHelper(out, fail, std::forward<CERTS>(certs)...);
+    certCopier(out, forward<CERT>(cert), fail);
+    return certCopyHelper(out, fail, forward<CERTS>(certs)...);
 }
 
 
@@ -132,7 +132,7 @@ inline size_t noOfCert(const keymaster_cert_chain_t& cert_chain) { return cert_c
 inline size_t certCount() { return 0; }
 template <typename CERT, typename... CERTS>
 inline size_t certCount(CERT&& cert, CERTS&&... certs) {
-    return noOfCert(std::forward<CERT>(cert)) + certCount(std::forward<CERTS>(certs)...);
+    return noOfCert(forward<CERT>(cert)) + certCount(forward<CERTS>(certs)...);
 }
 
 /*
@@ -155,12 +155,12 @@ template <typename... CERTS>
 CertChainPtr makeCertChain(CERTS&&... certs) {
     CertChainPtr result(new (std::nothrow) keymaster_cert_chain_t);
     if (!result.get()) return {};
-    result->entries = new (std::nothrow) keymaster_blob_t[certCount(std::forward<CERTS>(certs)...)];
+    result->entries = new (std::nothrow) keymaster_blob_t[certCount(forward<CERTS>(certs)...)];
     if (!result->entries) return {};
-    result->entry_count = certCount(std::forward<CERTS>(certs)...);
+    result->entry_count = certCount(forward<CERTS>(certs)...);
     bool allocation_failed = false;
     keymaster_blob_t* entries = result->entries;
-    certCopyHelper(&entries, &allocation_failed, std::forward<CERTS>(certs)...);
+    certCopyHelper(&entries, &allocation_failed, forward<CERTS>(certs)...);
     if (allocation_failed) return {};
     return result;
 }
-- 
2.7.4

