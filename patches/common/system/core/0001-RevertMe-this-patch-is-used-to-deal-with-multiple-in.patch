From 09f9fc3bc4af47dfce573e9e8a46d9fea2d46eff Mon Sep 17 00:00:00 2001
From: Bin Yang <bin.y.yang@intel.com>
Date: Sun, 2 Jun 2019 20:20:45 +0800
Subject: [PATCH 1/2] [RevertMe] this patch is used to deal with multiple input
 device,

It will be reverted later

Change-Id: Ie4f4d847a8fe2bf85df08ad73edfc7992c9cf0da
Tracked-On:
Signed-off-by: Bin Yang <bin.y.yang@intel.com>
---
 init/devices.cpp | 42 ++++++++++++++++++++++++++++++++++++++++++
 init/devices.h   |  1 +
 2 files changed, 43 insertions(+)
 mode change 100644 => 100755 init/devices.h

diff --git a/init/devices.cpp b/init/devices.cpp
index ada1e2870..87a42567b 100644
--- a/init/devices.cpp
+++ b/init/devices.cpp
@@ -26,6 +26,7 @@
 #include <android-base/logging.h>
 #include <android-base/stringprintf.h>
 #include <android-base/strings.h>
+#include <cutils/properties.h>
 #include <private/android_filesystem_config.h>
 #include <selinux/android.h>
 #include <selinux/selinux.h>
@@ -373,6 +374,44 @@ void DeviceHandler::HandleDevice(const std::string& action, const std::string& d
     }
 }
 
+bool DeviceHandler::is_filtered(const std::string path) {
+    int id = property_get_int32("ro.container.id", 0);
+    char conf_file_path[32];
+    memset(conf_file_path, 0 , 32);
+    sprintf(conf_file_path,"/ipc/config/input/input%d", id);
+    LOG(VERBOSE) << "INPUT-FILTER: check path: " << path;
+    FILE* fp = fopen(conf_file_path, "r");
+    if (fp == NULL) {
+        LOG(ERROR) << "cannot open input config file %s\n" << conf_file_path;
+        return true;
+    }
+
+    if (strstr(path.c_str(), "sound")) {
+            LOG(VERBOSE) << "INPUT-FILTER: sound ** : %s was not filtered.\n" << path;
+            return false;
+        }
+
+    char* line = NULL;
+    size_t len = 0;
+    ssize_t read;
+    while ((read = getline(&line, &len, fp)) != -1) {
+        line[strlen(line) - 1] = 0;
+        if (strstr(path.c_str(), line)) {
+            LOG(VERBOSE) << "INPUT-FILTER: path: %s was not filtered.\n" << path;
+            fclose(fp);
+            if (line) {
+                free(line);
+            }
+            return false;
+        }
+    }
+    fclose(fp);
+    if (line) {
+        free(line);
+    }
+    LOG(VERBOSE) << "INPUT-FILTER: path: %s was filtered!\n" << path;
+    return true;
+}
 void DeviceHandler::HandleDeviceEvent(const Uevent& uevent) {
     if (uevent.action == "add" || uevent.action == "change" || uevent.action == "online") {
         FixupSysPermissions(uevent.path, uevent.subsystem);
@@ -380,6 +419,9 @@ void DeviceHandler::HandleDeviceEvent(const Uevent& uevent) {
 
     // if it's not a /dev device, nothing to do
     if (uevent.major < 0 || uevent.minor < 0) return;
+    if(uevent.subsystem == "input" && is_filtered(uevent.path)) {
+        return;
+    }
 
     std::string devpath;
     std::vector<std::string> links;
diff --git a/init/devices.h b/init/devices.h
old mode 100644
new mode 100755
index f9035da3d..eea0c6e67
--- a/init/devices.h
+++ b/init/devices.h
@@ -117,6 +117,7 @@ class DeviceHandler {
     bool FindPlatformDevice(std::string path, std::string* platform_device_path) const;
     std::tuple<mode_t, uid_t, gid_t> GetDevicePermissions(
         const std::string& path, const std::vector<std::string>& links) const;
+    bool is_filtered(const std::string path);
     void MakeDevice(const std::string& path, bool block, int major, int minor,
                     const std::vector<std::string>& links) const;
     void HandleDevice(const std::string& action, const std::string& devpath, bool block, int major,
-- 
2.24.0

