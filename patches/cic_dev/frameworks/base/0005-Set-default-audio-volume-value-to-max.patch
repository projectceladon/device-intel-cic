From 9cfed6ac415cdfca8e9427d5b8d589cbf4843346 Mon Sep 17 00:00:00 2001
From: bxu10x <bingx.xu@intel.com>
Date: Fri, 3 Jan 2020 14:24:32 +0800
Subject: [PATCH] Set default audio volume value to max.

Change-Id: Id356636cc54d16fbefca5be3adabc378f2928c41
Tracked-On: OAM-88933
Signed-off-by: bxu10x <bingx.xu@intel.com>
---
 .../com/android/server/audio/AudioService.java     | 110 ++++++++++++---------
 1 file changed, 64 insertions(+), 46 deletions(-)

diff --git a/services/core/java/com/android/server/audio/AudioService.java b/services/core/java/com/android/server/audio/AudioService.java
index 75f6cb3..240b64e 100644
--- a/services/core/java/com/android/server/audio/AudioService.java
+++ b/services/core/java/com/android/server/audio/AudioService.java
@@ -727,60 +727,74 @@ public class AudioService extends IAudioService.Stub
         mHasVibrator = mVibrator == null ? false : mVibrator.hasVibrator();
 
         // Initialize volume
-        int maxCallVolume = SystemProperties.getInt("ro.config.vc_call_vol_steps", -1);
-        if (maxCallVolume != -1) {
-            MAX_STREAM_VOLUME[AudioSystem.STREAM_VOICE_CALL] = maxCallVolume;
+        int setDefaulttoMax = SystemProperties.getInt("ro.config.audio.maxvolume", -1);
+        if(setDefaulttoMax == 1) {
             AudioSystem.DEFAULT_STREAM_VOLUME[AudioSystem.STREAM_VOICE_CALL] =
-                    (maxCallVolume * 3) / 4;
-        }
+                     MAX_STREAM_VOLUME[AudioSystem.STREAM_VOICE_CALL];
+            AudioSystem.DEFAULT_STREAM_VOLUME[AudioSystem.STREAM_MUSIC] =
+                     MAX_STREAM_VOLUME[AudioSystem.STREAM_MUSIC];
+            AudioSystem.DEFAULT_STREAM_VOLUME[AudioSystem.STREAM_ALARM] =
+                     MAX_STREAM_VOLUME[AudioSystem.STREAM_ALARM];
+            AudioSystem.DEFAULT_STREAM_VOLUME[AudioSystem.STREAM_SYSTEM] =
+                     MAX_STREAM_VOLUME[AudioSystem.STREAM_SYSTEM];
+            AudioSystem.DEFAULT_STREAM_VOLUME[AudioSystem.STREAM_RING] =
+                     MAX_STREAM_VOLUME[AudioSystem.STREAM_RING];
+        } else {
+            int maxCallVolume = SystemProperties.getInt("ro.config.vc_call_vol_steps", -1);
+            if (maxCallVolume != -1) {
+                MAX_STREAM_VOLUME[AudioSystem.STREAM_VOICE_CALL] = maxCallVolume;
+                AudioSystem.DEFAULT_STREAM_VOLUME[AudioSystem.STREAM_VOICE_CALL] =
+                        (maxCallVolume * 3) / 4;
+            }
 
-        int maxMusicVolume = SystemProperties.getInt("ro.config.media_vol_steps", -1);
-        if (maxMusicVolume != -1) {
-            MAX_STREAM_VOLUME[AudioSystem.STREAM_MUSIC] = maxMusicVolume;
-        }
+            int maxMusicVolume = SystemProperties.getInt("ro.config.media_vol_steps", -1);
+            if (maxMusicVolume != -1) {
+                MAX_STREAM_VOLUME[AudioSystem.STREAM_MUSIC] = maxMusicVolume;
+            }
 
-        int defaultMusicVolume = SystemProperties.getInt("ro.config.media_vol_default", -1);
-        if (defaultMusicVolume != -1 &&
-                defaultMusicVolume <= MAX_STREAM_VOLUME[AudioSystem.STREAM_MUSIC]) {
-            AudioSystem.DEFAULT_STREAM_VOLUME[AudioSystem.STREAM_MUSIC] = defaultMusicVolume;
-        } else {
-            if (isPlatformTelevision()) {
-                AudioSystem.DEFAULT_STREAM_VOLUME[AudioSystem.STREAM_MUSIC] =
-                        MAX_STREAM_VOLUME[AudioSystem.STREAM_MUSIC] / 4;
+            int defaultMusicVolume = SystemProperties.getInt("ro.config.media_vol_default", -1);
+            if (defaultMusicVolume != -1 &&
+                    defaultMusicVolume <= MAX_STREAM_VOLUME[AudioSystem.STREAM_MUSIC]) {
+                AudioSystem.DEFAULT_STREAM_VOLUME[AudioSystem.STREAM_MUSIC] = defaultMusicVolume;
             } else {
-                AudioSystem.DEFAULT_STREAM_VOLUME[AudioSystem.STREAM_MUSIC] =
-                        MAX_STREAM_VOLUME[AudioSystem.STREAM_MUSIC] / 3;
+                if (isPlatformTelevision()) {
+                    AudioSystem.DEFAULT_STREAM_VOLUME[AudioSystem.STREAM_MUSIC] =
+                            MAX_STREAM_VOLUME[AudioSystem.STREAM_MUSIC] / 4;
+                } else {
+                    AudioSystem.DEFAULT_STREAM_VOLUME[AudioSystem.STREAM_MUSIC] =
+                            MAX_STREAM_VOLUME[AudioSystem.STREAM_MUSIC] / 3;
+                }
             }
-        }
 
-        int maxAlarmVolume = SystemProperties.getInt("ro.config.alarm_vol_steps", -1);
-        if (maxAlarmVolume != -1) {
-            MAX_STREAM_VOLUME[AudioSystem.STREAM_ALARM] = maxAlarmVolume;
-        }
+            int maxAlarmVolume = SystemProperties.getInt("ro.config.alarm_vol_steps", -1);
+            if (maxAlarmVolume != -1) {
+                MAX_STREAM_VOLUME[AudioSystem.STREAM_ALARM] = maxAlarmVolume;
+            }
 
-        int defaultAlarmVolume = SystemProperties.getInt("ro.config.alarm_vol_default", -1);
-        if (defaultAlarmVolume != -1 &&
-                defaultAlarmVolume <= MAX_STREAM_VOLUME[AudioSystem.STREAM_ALARM]) {
-            AudioSystem.DEFAULT_STREAM_VOLUME[AudioSystem.STREAM_ALARM] = defaultAlarmVolume;
-        } else {
-            // Default is 6 out of 7 (default maximum), so scale accordingly.
-            AudioSystem.DEFAULT_STREAM_VOLUME[AudioSystem.STREAM_ALARM] =
-                        6 * MAX_STREAM_VOLUME[AudioSystem.STREAM_ALARM] / 7;
-        }
+            int defaultAlarmVolume = SystemProperties.getInt("ro.config.alarm_vol_default", -1);
+            if (defaultAlarmVolume != -1 &&
+                    defaultAlarmVolume <= MAX_STREAM_VOLUME[AudioSystem.STREAM_ALARM]) {
+                AudioSystem.DEFAULT_STREAM_VOLUME[AudioSystem.STREAM_ALARM] = defaultAlarmVolume;
+            } else {
+                // Default is 6 out of 7 (default maximum), so scale accordingly.
+                AudioSystem.DEFAULT_STREAM_VOLUME[AudioSystem.STREAM_ALARM] =
+                            6 * MAX_STREAM_VOLUME[AudioSystem.STREAM_ALARM] / 7;
+            }
 
-        int maxSystemVolume = SystemProperties.getInt("ro.config.system_vol_steps", -1);
-        if (maxSystemVolume != -1) {
-            MAX_STREAM_VOLUME[AudioSystem.STREAM_SYSTEM] = maxSystemVolume;
-        }
+            int maxSystemVolume = SystemProperties.getInt("ro.config.system_vol_steps", -1);
+            if (maxSystemVolume != -1) {
+                MAX_STREAM_VOLUME[AudioSystem.STREAM_SYSTEM] = maxSystemVolume;
+            }
 
-        int defaultSystemVolume = SystemProperties.getInt("ro.config.system_vol_default", -1);
-        if (defaultSystemVolume != -1 &&
-                defaultSystemVolume <= MAX_STREAM_VOLUME[AudioSystem.STREAM_SYSTEM]) {
-            AudioSystem.DEFAULT_STREAM_VOLUME[AudioSystem.STREAM_SYSTEM] = defaultSystemVolume;
-        } else {
-            // Default is to use maximum.
-            AudioSystem.DEFAULT_STREAM_VOLUME[AudioSystem.STREAM_SYSTEM] =
-                        MAX_STREAM_VOLUME[AudioSystem.STREAM_SYSTEM];
+            int defaultSystemVolume = SystemProperties.getInt("ro.config.system_vol_default", -1);
+            if (defaultSystemVolume != -1 &&
+                    defaultSystemVolume <= MAX_STREAM_VOLUME[AudioSystem.STREAM_SYSTEM]) {
+                AudioSystem.DEFAULT_STREAM_VOLUME[AudioSystem.STREAM_SYSTEM] = defaultSystemVolume;
+            } else {
+                // Default is to use maximum.
+                AudioSystem.DEFAULT_STREAM_VOLUME[AudioSystem.STREAM_SYSTEM] =
+                            MAX_STREAM_VOLUME[AudioSystem.STREAM_SYSTEM];
+            }
         }
 
         sSoundEffectVolumeDb = context.getResources().getInteger(
@@ -1152,7 +1166,11 @@ public class AudioService extends IAudioService.Stub
         checkAllFixedVolumeDevices();
         checkAllAliasStreamVolumes();
         checkMuteAffectedStreams();
-        updateDefaultVolumes();
+
+        int setDefaulttoMax = SystemProperties.getInt("ro.config.audio.maxvolume", -1);
+        if(setDefaulttoMax != 1) {
+            updateDefaultVolumes();
+        }
     }
 
     // Update default indexes from aliased streams. Must be called after mStreamStates is created
-- 
2.7.4

