From b17d8f61c3ae9d586fa4399e386e8a9c54597447 Mon Sep 17 00:00:00 2001
From: "Wang, Liang" <liang.wang@intel.com>
Date: Fri, 23 Nov 2018 15:52:31 +0800
Subject: [PATCH] Add fake network connection info to fix app compatibility
 issue.

Some apps cannot work on ethernet network environment. So we create
fake Wifi connection in ConnectivityManager and WifiManager to fix it.

Change-Id: Id86f95f2efeefe83c3e12ed2badf1aafb82d9a5a
Tracked-On:
Signed-off-by: Wang, Liang <liang.wang@intel.com>
---
 .../java/android/net/ConnectivityManager.java | 32 ++++-----
 wifi/java/android/net/wifi/WifiManager.java   | 65 +++++++++++++++----
 2 files changed, 70 insertions(+), 27 deletions(-)

diff --git a/core/java/android/net/ConnectivityManager.java b/core/java/android/net/ConnectivityManager.java
index c5cb1f5b7cf..9a8d5f4a447 100644
--- a/core/java/android/net/ConnectivityManager.java
+++ b/core/java/android/net/ConnectivityManager.java
@@ -863,6 +863,13 @@ public class ConnectivityManager {
         return TYPE_NONE;
     }
 
+    private NetworkInfo generateFakeWifiNetworkInfo() {
+        NetworkInfo ni = new NetworkInfo(ConnectivityManager.TYPE_WIFI, 0, "WIFI", null);
+        ni.setDetailedState(NetworkInfo.DetailedState.CONNECTED, null, null);
+        ni.setIsAvailable(true);
+        return ni;
+    }
+
     /**
      * Returns details about the currently active default data network. When
      * connected, this network is the default route for outgoing connections.
@@ -879,11 +886,8 @@ public class ConnectivityManager {
      */
     @RequiresPermission(android.Manifest.permission.ACCESS_NETWORK_STATE)
     public NetworkInfo getActiveNetworkInfo() {
-        try {
-            return mService.getActiveNetworkInfo();
-        } catch (RemoteException e) {
-            throw e.rethrowFromSystemServer();
-        }
+        Log.e(TAG, "[AIC] **getActiveNetworkInfo** use fake Networkinfo");
+        return generateFakeWifiNetworkInfo();
     }
 
     /**
@@ -1015,11 +1019,8 @@ public class ConnectivityManager {
 
     /** {@hide} */
     public NetworkInfo getActiveNetworkInfoForUid(int uid, boolean ignoreBlocked) {
-        try {
-            return mService.getActiveNetworkInfoForUid(uid, ignoreBlocked);
-        } catch (RemoteException e) {
-            throw e.rethrowFromSystemServer();
-        }
+        Log.e(TAG, "[AIC] **getActiveNetworkInfoForUid** use fake Networkinfo");
+        return generateFakeWifiNetworkInfo();
     }
 
     /**
@@ -1043,6 +1044,10 @@ public class ConnectivityManager {
     @Deprecated
     @RequiresPermission(android.Manifest.permission.ACCESS_NETWORK_STATE)
     public NetworkInfo getNetworkInfo(int networkType) {
+        if (networkType == ConnectivityManager.TYPE_WIFI) {
+            Log.e(TAG, "[AIC] **getNetworkInfo** use fake Networkinfo");
+            return generateFakeWifiNetworkInfo();
+        }
         try {
             return mService.getNetworkInfo(networkType);
         } catch (RemoteException e) {
@@ -1088,11 +1093,8 @@ public class ConnectivityManager {
     @Deprecated
     @RequiresPermission(android.Manifest.permission.ACCESS_NETWORK_STATE)
     public NetworkInfo[] getAllNetworkInfo() {
-        try {
-            return mService.getAllNetworkInfo();
-        } catch (RemoteException e) {
-            throw e.rethrowFromSystemServer();
-        }
+        Log.e(TAG, "[AIC] **getAllNetworkInfo** use fake Networkinfo");
+        return new NetworkInfo[] {generateFakeWifiNetworkInfo()};
     }
 
     /**
diff --git a/wifi/java/android/net/wifi/WifiManager.java b/wifi/java/android/net/wifi/WifiManager.java
index 6963ed00b61..211fcfb4898 100644
--- a/wifi/java/android/net/wifi/WifiManager.java
+++ b/wifi/java/android/net/wifi/WifiManager.java
@@ -59,7 +59,11 @@ import dalvik.system.CloseGuard;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.ref.WeakReference;
+import java.net.Inet4Address;
 import java.net.InetAddress;
+import java.net.NetworkInterface;
+import java.net.SocketException;
+import java.util.Collections;
 import java.util.Collections;
 import java.util.List;
 import java.util.concurrent.CountDownLatch;
@@ -1663,11 +1667,39 @@ public class WifiManager {
      * @return the Wi-Fi information, contained in {@link WifiInfo}.
      */
     public WifiInfo getConnectionInfo() {
+        Log.e(TAG, "[AIC] **getConnectionInfo** use fake Wifi info");
+        return generateFakeWifiInfo();
+    }
+
+    private InetAddress getInet4AddressFromEth() {
         try {
-            return mService.getConnectionInfo(mContext.getOpPackageName());
-        } catch (RemoteException e) {
-            throw e.rethrowFromSystemServer();
+            List<NetworkInterface> interfaces = Collections.list(NetworkInterface.getNetworkInterfaces());
+            for (NetworkInterface intf : interfaces) {
+                if (intf.getDisplayName().equals("eth0")) {
+                    for (InetAddress addr : Collections.list(intf.getInetAddresses())) {
+                        if (addr instanceof Inet4Address) {
+                            return addr;
+                        }
+                    }
+                }
+            }
+        } catch (SocketException e) {
         }
+        return null;
+    }
+
+    private WifiInfo generateFakeWifiInfo() {
+        WifiInfo wi = new WifiInfo();
+        wi.setNetworkId(1);
+        wi.setSupplicantState(SupplicantState.COMPLETED);
+        wi.setBSSID("11:22:33:44:55:66");
+        wi.setMacAddress("66:55:44:33:22:11");
+        wi.setLinkSpeed(300);
+        wi.setFrequency(5000);
+        wi.setRssi(200);
+        wi.setSSID(WifiSsid.createFromAsciiEncoded("FakeWifi"));
+        wi.setInetAddress(getInet4AddressFromEth());
+        return wi;
     }
 
     /**
@@ -1775,17 +1807,29 @@ public class WifiManager {
         }
     }
 
+    private static int InetAddress_to_hex(InetAddress a) {
+        int result = 0;
+        byte b[] = a.getAddress();
+        for (int i = 0; i < 4; i++)
+            result |= (b[i] & 0xff) << (8 * i);
+        return result;
+    }
+
     /**
      * Return the DHCP-assigned addresses from the last successful DHCP request,
      * if any.
      * @return the DHCP information
      */
     public DhcpInfo getDhcpInfo() {
-        try {
-            return mService.getDhcpInfo();
-        } catch (RemoteException e) {
-            throw e.rethrowFromSystemServer();
+        Log.e(TAG, "[AIC] **getDhcpInfo** use fake Wifi info");
+        DhcpInfo i = new DhcpInfo();
+        InetAddress ip = getInet4AddressFromEth();
+        if (ip != null) {
+            i.ipAddress = InetAddress_to_hex(ip);
+            i.netmask = 16;
+            i.dns1 = 0xAC640001;
         }
+        return i;
     }
 
     /**
@@ -1815,11 +1859,8 @@ public class WifiManager {
      * @see #isWifiEnabled()
      */
     public int getWifiState() {
-        try {
-            return mService.getWifiEnabledState();
-        } catch (RemoteException e) {
-            throw e.rethrowFromSystemServer();
-        }
+        Log.e(TAG, "[AIC] **getWifiState** use fake Wifi info");
+        return WIFI_STATE_ENABLED;
     }
 
     /**
-- 
2.17.1

